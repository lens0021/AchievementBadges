# If you see this message on 'femiwiki/.github' repository, please keep in mind that all changes of
# this workflow file is for being copied to other repositories.
# If you see this message on any other repositories, DO NOT EDIT this file itself. You should
# edit https://github.com/femiwiki/.github/blob/master/workflows-template/extension-test.yml Instead
# of this. aa

name: Quibble and Phan

on:
  push:
    branches:
      - master
      - master-*
      - REL*_*
      - REL*_*-*
    tags-ignore:
      - '*.*'
  pull_request:

env:
  DOCKER_REGISTRY: docker-registry.wikimedia.org
  DOCKER_ORG: releng
  QUIBBLE_DOCKER_IMAGE: quibble-stretch-php73
  COVERAGE_DOCKER_IMAGE: quibble-coverage
  PHAN_DOCKER_IMAGE: mediawiki-phan-php73

jobs:
  test:
    strategy:
      matrix:
        stage:
          - phan
#           - coverage
#           - phpunit-unit
#           - phpunit
#           - phpunit-standalone
#           - npm-test
#           - composer-test
          # - qunit
          # - selenium
          # - api-testing

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # /home/runner/cache/                            Cache
      # /home/runner/src/                              Mediawiki installation
      # /home/runner/src/extensions/EXTENSION_NAME/    Clone of the extension repository
      # /home/runner/docker-images/                    Docker images which exported with docker-save command
      # $GITHUB_WORKSPACE/.github/workflows/.test-env  Used by actions/cache
      - name: Set up
        run: |
          # Export the target version of MediaWiki
          # An example of GITHUB_REF: refs/heads/feature-branch-1
          BRANCH_NAME=$(echo "$GITHUB_REF" | cut -d'/' -f3 | cut -d'-' -f1)
          BASE_BRANCH_NAME=$(echo "$GITHUB_BASE_REF" | cut -d'/' -f3)
          echo GITHUB_EVENT_NAME="$GITHUB_EVENT_NAME"
          echo BASE_BRANCH_NAME="$BASE_BRANCH_NAME"
          echo GITHUB_HEAD_REF="$GITHUB_HEAD_REF"
          if [[ "$BRANCH_NAME" =~ ^master|REL\d_\d+$ ]]; then
            # branch name starts with the version (ex: master-new-feature, REL1_34-bug-fix)
            echo 1
            export MEDIAWIKI_VERSION="$BRANCH_NAME"
          elif [ "$GITHUB_EVENT_NAME" == 'pull_request' ] && [[ "$BASE_BRANCH_NAME" =~ ^master|REL\d_\d+$ ]]; then
            echo 2
            export MEDIAWIKI_VERSION="$BASE_BRANCH_NAME"
          else
            echo else
            export MEDIAWIKI_VERSION=master
          fi
          echo MEDIAWIKI_VERSION="${MEDIAWIKI_VERSION}" >> $GITHUB_ENV

          if [ "${{ matrix.stage }}" == 'phan' ]; then
            export DOCKER_IMAGE="${PHAN_DOCKER_IMAGE}"
          elif [ "${{ matrix.stage }}" == coverage ]; then
            export DOCKER_IMAGE="${COVERAGE_DOCKER_IMAGE}"
          else
            export DOCKER_IMAGE="${QUIBBLE_DOCKER_IMAGE}"
          fi
          echo "DOCKER_IMAGE=${DOCKER_IMAGE}" >> $GITHUB_ENV

          # Get the latest docker tag (Ref: https://github.com/thcipriani/dockerregistry)
          DOCKER_LATEST_TAG="$(curl -sL "https://${DOCKER_REGISTRY}/v2/${DOCKER_ORG}/${DOCKER_IMAGE}/tags/list" |
            python3 -c 'import json;print("\n".join(json.loads(input())["tags"]))' |
            grep -v latest | sort -Vr | head -1)"
          echo "DOCKER_LATEST_TAG=${DOCKER_LATEST_TAG}" >> $GITHUB_ENV
          if [ "${{ matrix.stage }}" == 'phan' ]; then
            echo "QUIBBLE_DOCKER_LATEST_TAG=$(curl -sL "https://${DOCKER_REGISTRY}/v2/${DOCKER_ORG}/${QUIBBLE_DOCKER_IMAGE}/tags/list" |
              python3 -c 'import json;print("\n".join(json.loads(input())["tags"]))' |
              grep -v latest | sort -Vr | head -1)" >> $GITHUB_ENV
          elif [ "${{ matrix.stage }}" == 'coverage' ]; then
            echo "QUIBBLE_DOCKER_LATEST_TAG=${DOCKER_LATEST_TAG}" >> $GITHUB_ENV
          fi

          if [ -e .github/workflows/.test-env ]; then
            source .github/workflows/.test-env
            echo "DEPENDENCIES=${DEPENDENCIES}" >> $GITHUB_ENV
          fi

      - name: Cache docker image
        uses: actions/cache@v2
        with:
          path: /home/runner/docker-images/${{ env.DOCKER_IMAGE }}
          key: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_LATEST_TAG }}
